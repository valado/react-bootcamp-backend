{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/db/kv.ts", "../src/db/utils.ts", "../src/db/db.ts", "../src/db/index.ts", "../src/middleware/auth.ts", "../src/main.ts", "../src/routes/login.ts", "../src/routes/register.ts", "../src/routes/data.ts", "../src/routes/notes.ts", "../src/routes/issues.ts"],
  "sourcesContent": ["const validator = require(\"email-validator\");\n\nimport { Credentials } from \"./model/Credentials\";\n\nexport const getAuthHeader = (headers: any): string | null => {\n  if (headers.hasOwnProperty(\"authorization\")) {\n    return headers.authorization;\n  } else {\n    return null;\n  }\n};\n\nexport const extractToken = (authHeader: string) =>\n  authHeader ? authHeader.replace(\"Bearer \", \"\") : \"\";\n\nexport const extractCredentials = (token: string): Credentials | null => {\n  token = token.replace(\"Basic \", \"\");\n  const items = token.split(\":\");\n  if (items.length !== 2) {\n    return null;\n  }\n  const email = items[0];\n  const password = items[1];\n  if (!validator.validate(email)) {\n    return null;\n  }\n  return { email, password };\n};\n", "import { AuthResponse } from '../auth/auth';\nimport { uuid } from 'uuidv4';\nimport { kv } from '@vercel/kv';\nimport { DbAdapter, StoreOptions } from './DbAdapter';\nimport { convert2NotesKey, convert2IssuesKey } from './utils';\n\nconst TTL = 12 * 60 * 60; // 12 hours\nconst redisOptions = {\n  ex: TTL,\n};\nconst redisOptionsNoOverwrite = {\n  ex: TTL,\n  nx: true,\n};\n\nconst registerUser = (email: string, password: string) => {\n  const newAcessToken = uuid();\n  return Promise.all([\n    storeData(\n      email,\n      {\n        password: password,\n        token: newAcessToken,\n      },\n      { overwrite: false }\n    ),\n    storeData(newAcessToken, {}, { overwrite: false }),\n    storeData(convert2NotesKey(newAcessToken), {}, { overwrite: false }),\n    storeData(convert2IssuesKey(newAcessToken), {}, { overwrite: false }),\n  ]).then(() => Promise.resolve());\n};\n\nconst getTokenForUser = (\n  email: string,\n  password: string\n): Promise<AuthResponse> =>\n  getData(email).then((data: any) => {\n    if (!data) {\n      return {\n        success: false,\n        error: 'Invalid email! Registered?',\n      };\n    } else if (data.password === password) {\n      return {\n        success: true,\n        token: data.token,\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Invalid password!',\n      };\n    }\n  });\n\nconst tokenExists = (token: string) => getData(token).then((data) => !!data);\n\nconst isUserRegistered = (email: string) =>\n  getData(email).then((data) => !!data);\n\nconst getData = (token: string) => {\n  console.log('# getData');\n  return new Promise((resolve) => {\n    try {\n      kv.get(token).then((data: any) => {\n        console.log(data);\n        if (!data) {\n          resolve(null);\n        }\n        resolve(data);\n      });\n    } catch (err) {\n      console.error(err);\n      resolve(null);\n    }\n  });\n};\n\nconst storeData = (\n  key: string,\n  data: any,\n  options: StoreOptions = {\n    overwrite: true,\n  }\n): Promise<void> => {\n  console.log('# storeData');\n  console.log(data);\n  return kv\n    .set(\n      key,\n      JSON.stringify(data),\n      options.overwrite ? redisOptions : redisOptionsNoOverwrite\n    )\n    .then((res) => {\n      console.log(res);\n      return Promise.resolve();\n    });\n};\n\nexport const kvDb: DbAdapter = {\n  registerUser,\n  getTokenForUser,\n  tokenExists,\n  isUserRegistered,\n  getData,\n  storeData,\n};\n", "enum KeyPrefix {\n  NOTES = 'notes',\n  ISSUES = 'issues',\n}\n\nconst convert2Key = (prefix: string, token: string) => `${prefix}-${token}`;\n\nexport const convert2NotesKey = (token: string) =>\n  convert2Key(KeyPrefix.NOTES, token);\nexport const convert2IssuesKey = (token: string) =>\n  convert2Key(KeyPrefix.ISSUES, token);\n", "import { AuthResponse } from '../auth/auth';\nimport { DbAdapter } from './DbAdapter';\nimport { uuid } from 'uuidv4';\nimport { convert2NotesKey, convert2IssuesKey } from './utils';\n\nconst userData: any = {};\nconst store: any = {};\n\nconst registerUser = (email: string, password: string) => {\n  const newAcessToken = uuid();\n  userData[email] = {\n    password: password,\n    token: newAcessToken,\n  };\n  store[newAcessToken] = {};\n  store[newAcessToken] = {};\n  store[convert2NotesKey(newAcessToken)] = {};\n  store[convert2IssuesKey(newAcessToken)] = {};\n\n  return Promise.resolve();\n};\n\nconst getTokenForUser = (\n  email: string,\n  password: string\n): Promise<AuthResponse> => {\n  return new Promise((resolve) => {\n    if (!isUserRegistered(email)) {\n      resolve({\n        success: false,\n        error: 'Invalid email! Registered?',\n      });\n    } else if (userData[email] && userData[email].password === password) {\n      resolve({\n        success: true,\n        token: userData[email].token,\n      });\n    } else {\n      resolve({\n        success: false,\n        error: 'Invalid password!',\n      });\n    }\n  });\n};\n\nconst tokenExists = (token: string) => {\n  return Promise.resolve(!!store[token]);\n};\n\nconst getData = (token: string) => {\n  return new Promise((resolve) => {\n    if (!tokenExists(token)) {\n      resolve(null);\n    }\n    return resolve(store[token]);\n  });\n};\n\nconst storeData = (token: string, data: any) => {\n  store[token] = data;\n  return Promise.resolve();\n};\n\nconst isUserRegistered = (email: string) => {\n  return Promise.resolve(!!userData[email]);\n};\n\nexport const mockDb: DbAdapter = {\n  registerUser,\n  getTokenForUser,\n  isUserRegistered,\n  tokenExists,\n  getData,\n  storeData,\n};\n", "import { kvDb } from \"./kv\";\nimport { mockDb } from \"./db\";\nimport { DbAdapter } from \"./DbAdapter\";\n\nconst production = process.env.NODE_ENV === \"production\";\n\nconst db: DbAdapter = production ? kvDb : mockDb;\nexport default db;\n", "import { extractToken, getAuthHeader } from \"../utils\";\nimport db from \"./../db\";\n\nexport const authMiddleware = async (req: any, res: any, next: any) => {\n  const authHeader = getAuthHeader(req.headers);\n  const token = extractToken(authHeader);\n  if (!token) {\n    res.status(400);\n    res.send(\"Invalid Token!\");\n    return;\n  }\n\n  try {\n    const tokenExists = await db.tokenExists(token);\n    if (tokenExists) {\n      req.token = token;\n      return next();\n    } else {\n      res.status(401);\n      res.send(\"Not authorized! Registered?\");\n      return;\n    }\n  } catch (e) {\n    res.status(500);\n    res.send(\"Internal Server Error!\");\n    return;\n  }\n};\n", "import { authMiddleware } from './middleware/auth';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport cookieParser from 'cookie-parser';\n\nimport loginRouter from './routes/login';\nimport registerRouter from './routes/register';\nimport dataRouter from './routes/data';\nimport notesRouter from './routes/notes';\nimport issuesRouter from './routes/issues';\n\n// Create an express app\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json());\napp.use(cookieParser());\n\n// CORS\nconst corsOptions = {\n  origin: '*',\n  preflightContinue: false,\n  credentials: true,\n  methods: ['OPTIONS', 'GET', 'PUT', 'POST', 'PATCH', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n};\napp.use(cors(corsOptions));\n\n//public routes\napp.use('/register', registerRouter);\napp.use('/login', loginRouter);\n\n// protected routes\napp.use(authMiddleware);\napp.use('/data', dataRouter);\napp.use('/notes', notesRouter);\napp.use('/issues', issuesRouter);\n\napp.set('port', process.env.PORT || 9000);\n//Start Server\napp.listen(app.get('port'), function () {\n  console.log('Node app is running on port', app.get('port'));\n});\n", "import { Router } from \"express\";\nimport { Request, Response } from \"express\";\nimport db from \"../db\";\nimport { extractCredentials, getAuthHeader } from \"./../utils\";\nimport { FailedAuthResponse, SuccessfullAuthResponse } from \"../auth/auth\";\nconst router = Router();\n\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  try {\n    const authHeader = getAuthHeader(req.headers);\n    if (!authHeader) {\n      res.status(400);\n      return res.send(\"Invalid Authorization header!\");\n    }\n    const credentials = extractCredentials(authHeader);\n    if (!credentials) {\n      res.status(400);\n      return res.send(\"Invalid Authorization header!\");\n    }\n    const entry = await db.getTokenForUser(\n      credentials.email,\n      credentials.password\n    );\n    if (entry.success) {\n      return res\n        .status(200)\n        .json({ token: (entry as SuccessfullAuthResponse).token });\n    } else {\n      return res\n        .status(401)\n        .send({ error: (entry as FailedAuthResponse).error });\n    }\n  } catch (err) {\n    console.error(err);\n    res.status(500);\n    return res.send(\"Server error!\");\n  }\n});\n\nexport default router;\n", "import { Router } from \"express\";\nimport { Request, Response } from \"express\";\nimport db from \"../db\";\nimport { extractCredentials, getAuthHeader } from \"../utils\";\nconst router = Router();\n\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  try {\n    const authHeader = getAuthHeader(req.headers);\n    if (!authHeader) {\n      res.status(400);\n      res.send(\"Invalid Authorization header!\");\n      return;\n    }\n    const credentials = extractCredentials(authHeader);\n    if (!credentials) {\n      res.status(400);\n      res.send(\"Invalid Credentials!\");\n      return;\n    }\n\n    const userExists = await db.isUserRegistered(credentials.email);\n\n    if (userExists) {\n      res.status(400);\n      return res.send(\"Email is already taken!\");\n    } else {\n      await db.registerUser(credentials.email, credentials.password);\n      res.status(200);\n      return res.send();\n    }\n  } catch (err) {\n    console.error(err);\n    res.status(500);\n    return res.send(\"Server error!\");\n  }\n});\n\nexport default router;\n", "import { Router } from \"express\";\nimport { Request, Response } from \"express\";\nimport db from \"../db\";\nimport { CustomRequest } from \"../model/CustomRequest\";\nconst router = Router();\n\nrouter.post(\"/\", (req: Request, res: Response) => {\n  const token = (req as CustomRequest).token;\n  console.log(token);\n  console.log(req.body);\n  db.storeData(token, req.body)\n    .then(() => {\n      res.status(200);\n      return res.send();\n    })\n    .catch((err) => {\n      console.error(err);\n      res.status(500);\n      return res.send(\"Server error!\");\n    });\n});\n\nrouter.get(\"/\", (req: Request, res: Response) => {\n  const token = (req as CustomRequest).token;\n  db.getData(token)\n    .then((data) => {\n      if (!data) {\n        res.status(500);\n        return res.send(\"Server error!\");\n      }\n      return res.json(data);\n    })\n    .catch((err) => {\n      console.error(err);\n      res.status(500);\n      return res.send(\"Server error!\");\n    });\n});\n\nexport default router;\n", "import { Router } from 'express';\nimport { Request, Response } from 'express';\nimport db from '../db';\nimport { CustomRequest } from '../model/CustomRequest';\nimport { uuid } from 'uuidv4';\nimport { convert2NotesKey } from 'src/db/utils';\n\nconst router = Router();\n\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    const token = (req as CustomRequest).token;\n    const notes = await db.getData(convert2NotesKey(token));\n\n    if (!notes) {\n      res.status(500);\n      return res.send('Server error!');\n    }\n    return res.json({\n      notes,\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500);\n    return res.send('Server error!');\n  }\n});\n\nrouter.put('/', async (req: Request, res: Response) => {\n  try {\n    const token = (req as CustomRequest).token;\n    const note = req.body.note;\n    if (!note) {\n      res.status(400);\n      return res.send('Bad Request!');\n    }\n\n    const notes = await db.getData(convert2NotesKey(token));\n    if (!notes) {\n      res.status(500);\n      return res.send('Server error!');\n    }\n    const newId = uuid();\n    notes[newId] = { id: newId, ...note };\n    await db.storeData(convert2NotesKey(token), notes);\n    return res.json({ id: newId });\n  } catch (err) {\n    console.error(err);\n    res.status(500);\n    return res.send('Server error!');\n  }\n});\n\nrouter.patch('/:id', async (req: Request, res: Response) => {\n  try {\n    const token = (req as CustomRequest).token;\n    const note = req.body.note;\n    const id = req.params.id;\n    if (!note) {\n      res.status(400);\n      return res.send('Bad Request!');\n    }\n    const notes = await db.getData(convert2NotesKey(token));\n    if (!notes) {\n      res.status(500);\n      return res.send('Server error!');\n    }\n    if (!notes[id]) {\n      res.status(404);\n      return res.send('Note not found!');\n    }\n    notes[id] = { ...notes[id], ...note };\n    await db.storeData(convert2NotesKey(token), notes);\n    return res.send();\n  } catch (err) {\n    console.error(err);\n    res.status(500);\n    return res.send('Server error!');\n  }\n});\n\nrouter.delete('/:id', async (req: Request, res: Response) => {\n  try {\n    const token = (req as CustomRequest).token;\n    const id = req.params.id;\n    const notes = await db.getData(convert2NotesKey(token));\n    if (!notes) {\n      res.status(500);\n      return res.send('Server error!');\n    }\n    delete notes[id];\n    await db.storeData(convert2NotesKey(token), notes);\n    return res.send();\n  } catch (err) {\n    console.error(err);\n    res.status(500);\n    return res.send('Server error!');\n  }\n});\n\nexport default router;\n", "import { Router } from 'express';\nimport { Request, Response } from 'express';\nimport db from '../db';\nimport { CustomRequest } from '../model/CustomRequest';\nimport { convert2IssuesKey } from 'src/db/utils';\nconst router = Router();\n\nrouter.post('/', async (req: Request, res: Response) => {\n  try {\n    const token = (req as CustomRequest).token;\n    await db.storeData(convert2IssuesKey(token), req.body);\n\n    res.status(200);\n    return res.send();\n  } catch (err) {\n    console.error(err);\n    res.status(500);\n    return res.send('Server error!');\n  }\n});\n\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    const token = (req as CustomRequest).token;\n    const data = await db.getData(convert2IssuesKey(token));\n\n    if (!data) {\n      res.status(500);\n      return res.send('Server error!');\n    }\n    return res.json(data);\n  } catch (err) {\n    console.error(err);\n    res.status(500);\n    return res.send('Server error!');\n  }\n});\n\nexport default router;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,YAAY,QAAQ,iBAAiB;AAIpC,IAAM,gBAAgB,CAAC,YAAgC;AAC5D,MAAI,QAAQ,eAAe,eAAe,GAAG;AAC3C,WAAO,QAAQ;AAAA,EACjB,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEO,IAAM,eAAe,CAAC,eAC3B,aAAa,WAAW,QAAQ,WAAW,EAAE,IAAI;AAE5C,IAAM,qBAAqB,CAAC,UAAsC;AACvE,UAAQ,MAAM,QAAQ,UAAU,EAAE;AAClC,QAAM,QAAQ,MAAM,MAAM,GAAG;AAC7B,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO;AAAA,EACT;AACA,QAAM,QAAQ,MAAM,CAAC;AACrB,QAAM,WAAW,MAAM,CAAC;AACxB,MAAI,CAAC,UAAU,SAAS,KAAK,GAAG;AAC9B,WAAO;AAAA,EACT;AACA,SAAO,EAAE,OAAO,SAAS;AAC3B;;;AC1BA,oBAAqB;AACrB,gBAAmB;;;ACGnB,IAAM,cAAc,CAAC,QAAgB,UAAkB,GAAG,UAAU;AAE7D,IAAM,mBAAmB,CAAC,UAC/B,YAAY,qBAAiB,KAAK;AAC7B,IAAM,oBAAoB,CAAC,UAChC,YAAY,uBAAkB,KAAK;;;ADJrC,IAAM,MAAM,KAAK,KAAK;AACtB,IAAM,eAAe;AAAA,EACnB,IAAI;AACN;AACA,IAAM,0BAA0B;AAAA,EAC9B,IAAI;AAAA,EACJ,IAAI;AACN;AAEA,IAAM,eAAe,CAAC,OAAe,aAAqB;AACxD,QAAM,oBAAgB,oBAAK;AAC3B,SAAO,QAAQ,IAAI;AAAA,IACjB;AAAA,MACE;AAAA,MACA;AAAA,QACE;AAAA,QACA,OAAO;AAAA,MACT;AAAA,MACA,EAAE,WAAW,MAAM;AAAA,IACrB;AAAA,IACA,UAAU,eAAe,CAAC,GAAG,EAAE,WAAW,MAAM,CAAC;AAAA,IACjD,UAAU,iBAAiB,aAAa,GAAG,CAAC,GAAG,EAAE,WAAW,MAAM,CAAC;AAAA,IACnE,UAAU,kBAAkB,aAAa,GAAG,CAAC,GAAG,EAAE,WAAW,MAAM,CAAC;AAAA,EACtE,CAAC,EAAE,KAAK,MAAM,QAAQ,QAAQ,CAAC;AACjC;AAEA,IAAM,kBAAkB,CACtB,OACA,aAEA,QAAQ,KAAK,EAAE,KAAK,CAAC,SAAc;AACjC,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO;AAAA,IACT;AAAA,EACF,WAAW,KAAK,aAAa,UAAU;AACrC,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO,KAAK;AAAA,IACd;AAAA,EACF,OAAO;AACL,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO;AAAA,IACT;AAAA,EACF;AACF,CAAC;AAEH,IAAM,cAAc,CAAC,UAAkB,QAAQ,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI;AAE3E,IAAM,mBAAmB,CAAC,UACxB,QAAQ,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI;AAEtC,IAAM,UAAU,CAAC,UAAkB;AACjC,UAAQ,IAAI,WAAW;AACvB,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,QAAI;AACF,mBAAG,IAAI,KAAK,EAAE,KAAK,CAAC,SAAc;AAChC,gBAAQ,IAAI,IAAI;AAChB,YAAI,CAAC,MAAM;AACT,kBAAQ,IAAI;AAAA,QACd;AACA,gBAAQ,IAAI;AAAA,MACd,CAAC;AAAA,IACH,SAAS,KAAP;AACA,cAAQ,MAAM,GAAG;AACjB,cAAQ,IAAI;AAAA,IACd;AAAA,EACF,CAAC;AACH;AAEA,IAAM,YAAY,CAChB,KACA,MACA,UAAwB;AAAA,EACtB,WAAW;AACb,MACkB;AAClB,UAAQ,IAAI,aAAa;AACzB,UAAQ,IAAI,IAAI;AAChB,SAAO,aACJ;AAAA,IACC;AAAA,IACA,KAAK,UAAU,IAAI;AAAA,IACnB,QAAQ,YAAY,eAAe;AAAA,EACrC,EACC,KAAK,CAAC,QAAQ;AACb,YAAQ,IAAI,GAAG;AACf,WAAO,QAAQ,QAAQ;AAAA,EACzB,CAAC;AACL;AAEO,IAAM,OAAkB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;;AExGA,IAAAA,iBAAqB;AAGrB,IAAM,WAAgB,CAAC;AACvB,IAAM,QAAa,CAAC;AAEpB,IAAMC,gBAAe,CAAC,OAAe,aAAqB;AACxD,QAAM,oBAAgB,qBAAK;AAC3B,WAAS,KAAK,IAAI;AAAA,IAChB;AAAA,IACA,OAAO;AAAA,EACT;AACA,QAAM,aAAa,IAAI,CAAC;AACxB,QAAM,aAAa,IAAI,CAAC;AACxB,QAAM,iBAAiB,aAAa,CAAC,IAAI,CAAC;AAC1C,QAAM,kBAAkB,aAAa,CAAC,IAAI,CAAC;AAE3C,SAAO,QAAQ,QAAQ;AACzB;AAEA,IAAMC,mBAAkB,CACtB,OACA,aAC0B;AAC1B,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,QAAI,CAACC,kBAAiB,KAAK,GAAG;AAC5B,cAAQ;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA,MACT,CAAC;AAAA,IACH,WAAW,SAAS,KAAK,KAAK,SAAS,KAAK,EAAE,aAAa,UAAU;AACnE,cAAQ;AAAA,QACN,SAAS;AAAA,QACT,OAAO,SAAS,KAAK,EAAE;AAAA,MACzB,CAAC;AAAA,IACH,OAAO;AACL,cAAQ;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;AAEA,IAAMC,eAAc,CAAC,UAAkB;AACrC,SAAO,QAAQ,QAAQ,CAAC,CAAC,MAAM,KAAK,CAAC;AACvC;AAEA,IAAMC,WAAU,CAAC,UAAkB;AACjC,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,QAAI,CAACD,aAAY,KAAK,GAAG;AACvB,cAAQ,IAAI;AAAA,IACd;AACA,WAAO,QAAQ,MAAM,KAAK,CAAC;AAAA,EAC7B,CAAC;AACH;AAEA,IAAME,aAAY,CAAC,OAAe,SAAc;AAC9C,QAAM,KAAK,IAAI;AACf,SAAO,QAAQ,QAAQ;AACzB;AAEA,IAAMH,oBAAmB,CAAC,UAAkB;AAC1C,SAAO,QAAQ,QAAQ,CAAC,CAAC,SAAS,KAAK,CAAC;AAC1C;AAEO,IAAM,SAAoB;AAAA,EAC/B,cAAAF;AAAA,EACA,iBAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,aAAAC;AAAA,EACA,SAAAC;AAAA,EACA,WAAAC;AACF;;;ACvEA,IAAM,aAAa,QAAQ,IAAI,aAAa;AAE5C,IAAM,KAAgB,aAAa,OAAO;AAC1C,IAAO,aAAQ;;;ACJR,IAAM,iBAAiB,OAAO,KAAU,KAAU,SAAc;AACrE,QAAM,aAAa,cAAc,IAAI,OAAO;AAC5C,QAAM,QAAQ,aAAa,UAAU;AACrC,MAAI,CAAC,OAAO;AACV,QAAI,OAAO,GAAG;AACd,QAAI,KAAK,gBAAgB;AACzB;AAAA,EACF;AAEA,MAAI;AACF,UAAMC,eAAc,MAAM,WAAG,YAAY,KAAK;AAC9C,QAAIA,cAAa;AACf,UAAI,QAAQ;AACZ,aAAO,KAAK;AAAA,IACd,OAAO;AACL,UAAI,OAAO,GAAG;AACd,UAAI,KAAK,6BAA6B;AACtC;AAAA,IACF;AAAA,EACF,SAAS,GAAP;AACA,QAAI,OAAO,GAAG;AACd,QAAI,KAAK,wBAAwB;AACjC;AAAA,EACF;AACF;;;AC1BA,IAAAC,kBAAoB;AACpB,yBAAuB;AACvB,kBAAiB;AACjB,oBAAmB;AACnB,2BAAyB;;;ACLzB,qBAAuB;AAKvB,IAAM,aAAS,uBAAO;AAEtB,OAAO,KAAK,KAAK,OAAO,KAAc,QAAkB;AACtD,MAAI;AACF,UAAM,aAAa,cAAc,IAAI,OAAO;AAC5C,QAAI,CAAC,YAAY;AACf,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,+BAA+B;AAAA,IACjD;AACA,UAAM,cAAc,mBAAmB,UAAU;AACjD,QAAI,CAAC,aAAa;AAChB,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,+BAA+B;AAAA,IACjD;AACA,UAAM,QAAQ,MAAM,WAAG;AAAA,MACrB,YAAY;AAAA,MACZ,YAAY;AAAA,IACd;AACA,QAAI,MAAM,SAAS;AACjB,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,OAAQ,MAAkC,MAAM,CAAC;AAAA,IAC7D,OAAO;AACL,aAAO,IACJ,OAAO,GAAG,EACV,KAAK,EAAE,OAAQ,MAA6B,MAAM,CAAC;AAAA,IACxD;AAAA,EACF,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC;AACF,CAAC;AAED,IAAO,gBAAQ;;;ACvCf,IAAAC,kBAAuB;AAIvB,IAAMC,cAAS,wBAAO;AAEtBA,QAAO,KAAK,KAAK,OAAO,KAAc,QAAkB;AACtD,MAAI;AACF,UAAM,aAAa,cAAc,IAAI,OAAO;AAC5C,QAAI,CAAC,YAAY;AACf,UAAI,OAAO,GAAG;AACd,UAAI,KAAK,+BAA+B;AACxC;AAAA,IACF;AACA,UAAM,cAAc,mBAAmB,UAAU;AACjD,QAAI,CAAC,aAAa;AAChB,UAAI,OAAO,GAAG;AACd,UAAI,KAAK,sBAAsB;AAC/B;AAAA,IACF;AAEA,UAAM,aAAa,MAAM,WAAG,iBAAiB,YAAY,KAAK;AAE9D,QAAI,YAAY;AACd,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,yBAAyB;AAAA,IAC3C,OAAO;AACL,YAAM,WAAG,aAAa,YAAY,OAAO,YAAY,QAAQ;AAC7D,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK;AAAA,IAClB;AAAA,EACF,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC;AACF,CAAC;AAED,IAAO,mBAAQA;;;ACtCf,IAAAC,kBAAuB;AAIvB,IAAMC,cAAS,wBAAO;AAEtBA,QAAO,KAAK,KAAK,CAAC,KAAc,QAAkB;AAChD,QAAM,QAAS,IAAsB;AACrC,UAAQ,IAAI,KAAK;AACjB,UAAQ,IAAI,IAAI,IAAI;AACpB,aAAG,UAAU,OAAO,IAAI,IAAI,EACzB,KAAK,MAAM;AACV,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK;AAAA,EAClB,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC,CAAC;AACL,CAAC;AAEDA,QAAO,IAAI,KAAK,CAAC,KAAc,QAAkB;AAC/C,QAAM,QAAS,IAAsB;AACrC,aAAG,QAAQ,KAAK,EACb,KAAK,CAAC,SAAS;AACd,QAAI,CAAC,MAAM;AACT,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,eAAe;AAAA,IACjC;AACA,WAAO,IAAI,KAAK,IAAI;AAAA,EACtB,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC,CAAC;AACL,CAAC;AAED,IAAO,eAAQA;;;ACvCf,IAAAC,kBAAuB;AAIvB,IAAAC,iBAAqB;AAGrB,IAAMC,cAAS,wBAAO;AAEtBA,QAAO,IAAI,KAAK,OAAO,KAAc,QAAkB;AACrD,MAAI;AACF,UAAM,QAAS,IAAsB;AACrC,UAAM,QAAQ,MAAM,WAAG,QAAQ,iBAAiB,KAAK,CAAC;AAEtD,QAAI,CAAC,OAAO;AACV,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,eAAe;AAAA,IACjC;AACA,WAAO,IAAI,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC;AACF,CAAC;AAEDA,QAAO,IAAI,KAAK,OAAO,KAAc,QAAkB;AACrD,MAAI;AACF,UAAM,QAAS,IAAsB;AACrC,UAAM,OAAO,IAAI,KAAK;AACtB,QAAI,CAAC,MAAM;AACT,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,cAAc;AAAA,IAChC;AAEA,UAAM,QAAQ,MAAM,WAAG,QAAQ,iBAAiB,KAAK,CAAC;AACtD,QAAI,CAAC,OAAO;AACV,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,eAAe;AAAA,IACjC;AACA,UAAM,YAAQ,qBAAK;AACnB,UAAM,KAAK,IAAI,EAAE,IAAI,OAAO,GAAG,KAAK;AACpC,UAAM,WAAG,UAAU,iBAAiB,KAAK,GAAG,KAAK;AACjD,WAAO,IAAI,KAAK,EAAE,IAAI,MAAM,CAAC;AAAA,EAC/B,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC;AACF,CAAC;AAEDA,QAAO,MAAM,QAAQ,OAAO,KAAc,QAAkB;AAC1D,MAAI;AACF,UAAM,QAAS,IAAsB;AACrC,UAAM,OAAO,IAAI,KAAK;AACtB,UAAM,KAAK,IAAI,OAAO;AACtB,QAAI,CAAC,MAAM;AACT,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,cAAc;AAAA,IAChC;AACA,UAAM,QAAQ,MAAM,WAAG,QAAQ,iBAAiB,KAAK,CAAC;AACtD,QAAI,CAAC,OAAO;AACV,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,eAAe;AAAA,IACjC;AACA,QAAI,CAAC,MAAM,EAAE,GAAG;AACd,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,iBAAiB;AAAA,IACnC;AACA,UAAM,EAAE,IAAI,EAAE,GAAG,MAAM,EAAE,GAAG,GAAG,KAAK;AACpC,UAAM,WAAG,UAAU,iBAAiB,KAAK,GAAG,KAAK;AACjD,WAAO,IAAI,KAAK;AAAA,EAClB,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC;AACF,CAAC;AAEDA,QAAO,OAAO,QAAQ,OAAO,KAAc,QAAkB;AAC3D,MAAI;AACF,UAAM,QAAS,IAAsB;AACrC,UAAM,KAAK,IAAI,OAAO;AACtB,UAAM,QAAQ,MAAM,WAAG,QAAQ,iBAAiB,KAAK,CAAC;AACtD,QAAI,CAAC,OAAO;AACV,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,eAAe;AAAA,IACjC;AACA,WAAO,MAAM,EAAE;AACf,UAAM,WAAG,UAAU,iBAAiB,KAAK,GAAG,KAAK;AACjD,WAAO,IAAI,KAAK;AAAA,EAClB,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC;AACF,CAAC;AAED,IAAO,gBAAQA;;;ACpGf,IAAAC,kBAAuB;AAKvB,IAAMC,cAAS,wBAAO;AAEtBA,QAAO,KAAK,KAAK,OAAO,KAAc,QAAkB;AACtD,MAAI;AACF,UAAM,QAAS,IAAsB;AACrC,UAAM,WAAG,UAAU,kBAAkB,KAAK,GAAG,IAAI,IAAI;AAErD,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK;AAAA,EAClB,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC;AACF,CAAC;AAEDA,QAAO,IAAI,KAAK,OAAO,KAAc,QAAkB;AACrD,MAAI;AACF,UAAM,QAAS,IAAsB;AACrC,UAAM,OAAO,MAAM,WAAG,QAAQ,kBAAkB,KAAK,CAAC;AAEtD,QAAI,CAAC,MAAM;AACT,UAAI,OAAO,GAAG;AACd,aAAO,IAAI,KAAK,eAAe;AAAA,IACjC;AACA,WAAO,IAAI,KAAK,IAAI;AAAA,EACtB,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,QAAI,OAAO,GAAG;AACd,WAAO,IAAI,KAAK,eAAe;AAAA,EACjC;AACF,CAAC;AAED,IAAO,iBAAQA;;;ALxBf,IAAM,UAAM,gBAAAC,SAAQ;AACpB,IAAI,QAAI,cAAAC,SAAO,CAAC;AAChB,IAAI,IAAI,mBAAAC,QAAW,KAAK,CAAC;AACzB,IAAI,QAAI,qBAAAC,SAAa,CAAC;AAGtB,IAAM,cAAc;AAAA,EAClB,QAAQ;AAAA,EACR,mBAAmB;AAAA,EACnB,aAAa;AAAA,EACb,SAAS,CAAC,WAAW,OAAO,OAAO,QAAQ,SAAS,QAAQ;AAAA,EAC5D,gBAAgB,CAAC,gBAAgB,eAAe;AAClD;AACA,IAAI,QAAI,YAAAC,SAAK,WAAW,CAAC;AAGzB,IAAI,IAAI,aAAa,gBAAc;AACnC,IAAI,IAAI,UAAU,aAAW;AAG7B,IAAI,IAAI,cAAc;AACtB,IAAI,IAAI,SAAS,YAAU;AAC3B,IAAI,IAAI,UAAU,aAAW;AAC7B,IAAI,IAAI,WAAW,cAAY;AAE/B,IAAI,IAAI,QAAQ,QAAQ,IAAI,QAAQ,GAAI;AAExC,IAAI,OAAO,IAAI,IAAI,MAAM,GAAG,WAAY;AACtC,UAAQ,IAAI,+BAA+B,IAAI,IAAI,MAAM,CAAC;AAC5D,CAAC;",
  "names": ["import_uuidv4", "registerUser", "getTokenForUser", "isUserRegistered", "tokenExists", "getData", "storeData", "tokenExists", "import_express", "import_express", "router", "import_express", "router", "import_express", "import_uuidv4", "router", "import_express", "router", "express", "helmet", "bodyParser", "cookieParser", "cors"]
}
